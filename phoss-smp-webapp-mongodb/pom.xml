<!--

    Copyright (C) 2019-2025 Philip Helger and contributors
    philip[at]helger[dot]com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.helger</groupId>
    <artifactId>phoss-smp-parent-pom</artifactId>
    <version>7.2.7-SNAPSHOT</version>
  </parent>
  <artifactId>phoss-smp-webapp-mongodb</artifactId>
  <packaging>war</packaging>
  <name>phoss-smp-webapp-mongodb</name>
  <description>SMP webapp with management GUI and MongoDB backened</description>
  <url>https://github.com/phax/phoss-smp/phoss-smp-webapp-mongodb</url>
  <inceptionYear>2019</inceptionYear>

  <licenses>
    <license>
      <name>Apache 2</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0</url>
      <distribution>repo</distribution>
    </license>
  </licenses>
 
  <organization>
    <name>Philip Helger</name>
    <url>https://www.helger.com</url>
  </organization>

  <developers>
    <developer>
      <id>philip</id>
      <name>Philip Helger</name>
      <email>ph(at)helger.com</email>
      <url>https://www.helger.com</url>
    </developer>
  </developers>

  <properties>
    <m2e.jaxrs.activation>false</m2e.jaxrs.activation>
    <m2e.jpa.activation>false</m2e.jpa.activation>
    <m2e.jsf.activation>false</m2e.jsf.activation>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>com.helger</groupId>
      <artifactId>phoss-smp-webapp</artifactId>
    </dependency>
    <dependency>
      <groupId>com.helger</groupId>
      <artifactId>phoss-smp-backend-mongodb</artifactId>
    </dependency>
    
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.helger.photon</groupId>
      <artifactId>ph-oton-jetty</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>apache-jsp</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.mortbay.jasper</groupId>
          <artifactId>apache-jsp</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.eclipse.jetty</groupId>
          <artifactId>jetty-jsp</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.core</groupId>
      <artifactId>jersey-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.inject</groupId>
      <artifactId>jersey-hk2</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.glassfish.jersey.media</groupId>
      <artifactId>jersey-media-jaxb</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>${basedir}/src/main/resources</directory>
        <targetPath>${project.build.directory}/classes</targetPath>
      </resource>
      <resource>
        <directory>${basedir}/src/test/resources</directory>
        <targetPath>${project.build.directory}/test-classes</targetPath>
      </resource>
      <resource>
        <directory>${basedir}/src/main/webapp</directory>
        <targetPath>${project.build.directory}/webapp-classes</targetPath>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>com.helger.maven</groupId>
        <artifactId>ph-jscompress-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>com.helger.maven</groupId>
        <artifactId>ph-csscompress-maven-plugin</artifactId>
      </plugin>
      <!-- Copy compiled classes to proper location for shading -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <!-- Copy main classes -->
                <copy todir="${project.build.directory}/classes">
                  <fileset dir="${project.build.directory}/classes"/>
                </copy>
                <!-- Copy test classes that include our main class -->
                <copy todir="${project.build.directory}/classes" failonerror="false">
                  <fileset dir="${project.build.directory}/test-classes"/>
                </copy>
                <!-- Unpack WAR and extract classes to proper location -->
                <unzip src="${project.build.directory}/${project.artifactId}-${project.version}.war" dest="${project.build.directory}/war-unpacked"/>
                <copy todir="${project.build.directory}/classes">
                  <fileset dir="${project.build.directory}/war-unpacked/WEB-INF/classes"/>
                </copy>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>fix-jar-structure</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <!-- Fix the JAR structure by moving WEB-INF/classes to root -->
                <mkdir dir="${project.build.directory}/jar-temp"/>
                <unjar src="${project.build.directory}/phoss-smp-mongodb-standalone.jar" dest="${project.build.directory}/jar-temp"/>
                <copy todir="${project.build.directory}/jar-temp">
                  <fileset dir="${project.build.directory}/jar-temp/WEB-INF/classes"/>
                </copy>
                <delete dir="${project.build.directory}/jar-temp/WEB-INF"/>
                <jar destfile="${project.build.directory}/phoss-smp-webapp-mongodb.jar" manifest="${project.build.directory}/jar-temp/META-INF/MANIFEST.MF">
                  <fileset dir="${project.build.directory}/jar-temp"/>
                </jar>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Maven Shade Plugin to create executable JAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.4.1</version>
        <executions>
          <execution>
            <phase>integration-test</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <!-- Include test classes and dependencies -->
              <shadeTestJar>false</shadeTestJar>
              <createDependencyReducedPom>false</createDependencyReducedPom>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.helger.phoss.smp.app.SMPServerMain</mainClass>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
              </transformers>
              <finalName>phoss-smp-mongodb-standalone</finalName>
              <!-- Include everything including current project -->
              <artifactSet>
                <includes>
                  <include>*:*</include>
                </includes>
              </artifactSet>
              <!-- Include current project's classes -->
              <outputFile>${project.build.directory}/phoss-smp-mongodb-standalone.jar</outputFile>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
                <filter>
                  <artifact>com.helger:phoss-smp-webapp-mongodb</artifact>
                  <includes>
                    <include>**</include>
                  </includes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Fix JAR structure to include web application content -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>fix-jar-structure</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <!-- Create temporary directory -->
                <mkdir dir="${project.build.directory}/jar-temp"/>
                
                <!-- Extract the shaded JAR -->
                <unjar src="${project.build.directory}/phoss-smp-mongodb-standalone.jar" 
                       dest="${project.build.directory}/jar-temp"/>
                
                <!-- Extract the original WAR to get web application structure -->
                <unjar src="${project.build.directory}/${project.artifactId}-${project.version}.war" 
                       dest="${project.build.directory}/war-temp"/>
                
                <!-- Copy WEB-INF and webapp files from WAR to JAR temp -->
                <copy todir="${project.build.directory}/jar-temp">
                  <fileset dir="${project.build.directory}/war-temp">
                    <include name="WEB-INF/**"/>
                    <include name="*.jsp"/>
                    <include name="*.html"/>
                    <include name="*.css"/>
                    <include name="*.js"/>
                    <include name="external/**"/>
                    <include name="favicon.ico"/>
                  </fileset>
                </copy>
                
                <!-- Move WEB-INF/classes content to root level for main class -->
                <copy todir="${project.build.directory}/jar-temp">
                  <fileset dir="${project.build.directory}/jar-temp/WEB-INF/classes"/>
                </copy>
                
                <!-- Create the final JAR with both executable and webapp structure -->
                <jar destfile="${project.build.directory}/${project.artifactId}.jar" 
                     basedir="${project.build.directory}/jar-temp"
                     manifest="${project.build.directory}/jar-temp/META-INF/MANIFEST.MF"/>
                
                <!-- Clean up temporary directories -->
                <delete dir="${project.build.directory}/jar-temp"/>
                <delete dir="${project.build.directory}/war-temp"/>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Copy test classes to include in the JAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-test-classes</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/classes</outputDirectory>
              <resources>
                <resource>
                  <directory>${project.build.directory}/test-classes</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>  
</project>
